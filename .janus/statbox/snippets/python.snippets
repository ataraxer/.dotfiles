snippet statbox
	import statbox.qb
	import statbox.qb.extractors2 as se
	import statbox.qb.filters2 as sf
	import statbox.mrtools as mrtools
	import statbox.mrlib as mrlib
	import statbox.tskv as tskv

	import itertools

snippet amap
	def combined_raw_map_${1:access}(log_lines):
		qb = statbox.qb.QB(
			log='${2:access}-log',
			fields=[
				'date', 'puid',
			],
			filters=[
				# access-log filtration
				sf.default_filtering('$2-log'),
				sf.vhost_belongs(PROJECTS),
				sf.page_belongs(PROJECTS),
				# custom filtration
				('puid', lambda x: x and x.isdigit()),
			],
		)

		for record in qb.map_lines(log_lines):
			${3:pass}


snippet cust
	custom_extractors = [
		${1}
	],
snippet extr
	se.make_log_field_extractor('${1:name}', '${2:field}'),
snippet param
	se.make_parameter_extractor(
		'${1:name}', '${2:field}',
		'parsed_parameters'
	),

snippet red
	def reduce_${1:name}(${2:key}, records):
		${4}
		for record in records:
			${3:pass}


snippet gred
	@mrtools.grouped_by_${1:period}(${2})
	def reduce_${3:name}(${4:key}, ${5:$1}, records):
		${6}
		for record in records:
			${7:pass}
snippet Dum
	yield mrlib.${1:Dummy}Record(
			${2:key},
			${3:subkey},
			${4:value})

snippet tskv
	yield mrlib.SimpleTSKVRecord(
			fielddate=period,
			${1:Values})
snippet rec
	record['${1}']
snippet run
	if __name__ == '__main__':
	    mrtools.run()
snippet browser_info
	BROWSER_INFO_REGEX = re.compile(r'(?:^|:)(?:ln|dl|nb|pa|ev)(?::|$)')
	('browser_info', lambda x: not x or not BROWSER_INFO_REGEX.search(x)),
snippet reag
	${1:name} = mrtools.reduce_aggregator(
		processor=${2:mrtools.listed_add},
		group_by_subkeys=${3:True})
snippet #
	# ==== ${1} ====
